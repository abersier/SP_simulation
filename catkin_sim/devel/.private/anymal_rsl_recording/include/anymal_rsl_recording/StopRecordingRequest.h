// Generated by gencpp from file anymal_rsl_recording/StopRecordingRequest.msg
// DO NOT EDIT!


#ifndef ANYMAL_RSL_RECORDING_MESSAGE_STOPRECORDINGREQUEST_H
#define ANYMAL_RSL_RECORDING_MESSAGE_STOPRECORDINGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anymal_rsl_recording
{
template <class ContainerAllocator>
struct StopRecordingRequest_
{
  typedef StopRecordingRequest_<ContainerAllocator> Type;

  StopRecordingRequest_()
    : verbose(false)  {
    }
  StopRecordingRequest_(const ContainerAllocator& _alloc)
    : verbose(false)  {
  (void)_alloc;
    }



   typedef uint8_t _verbose_type;
  _verbose_type verbose;





  typedef boost::shared_ptr< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StopRecordingRequest_

typedef ::anymal_rsl_recording::StopRecordingRequest_<std::allocator<void> > StopRecordingRequest;

typedef boost::shared_ptr< ::anymal_rsl_recording::StopRecordingRequest > StopRecordingRequestPtr;
typedef boost::shared_ptr< ::anymal_rsl_recording::StopRecordingRequest const> StopRecordingRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator1> & lhs, const ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator2> & rhs)
{
  return lhs.verbose == rhs.verbose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator1> & lhs, const ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anymal_rsl_recording

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3522d8a7fadc19be0545a762613821d2";
  }

  static const char* value(const ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3522d8a7fadc19beULL;
  static const uint64_t static_value2 = 0x0545a762613821d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anymal_rsl_recording/StopRecordingRequest";
  }

  static const char* value(const ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool verbose\n"
;
  }

  static const char* value(const ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.verbose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StopRecordingRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anymal_rsl_recording::StopRecordingRequest_<ContainerAllocator>& v)
  {
    s << indent << "verbose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.verbose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANYMAL_RSL_RECORDING_MESSAGE_STOPRECORDINGREQUEST_H
